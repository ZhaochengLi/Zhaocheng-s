<pre><div class="text_to_html"># Example 3.1: Delivery time data (Multiple linear regression)
#
# This example illustrates how to perform a multiple linear regression analysis
# including visual data inspection and fitting the model with lm command
#

### [1] Reading data into R and checking data
#
#   see the previous R script for file handling information.

data2=read.table(file=&quot;data-ex-3-1 (Delivery Time).prn&quot;, header=TRUE)  
attach(data2)  # data2 is a table in R. This allows variables in the table to be used individually.
print(data2)   # see if there data points are correct

### [2] Plotting/visualizing data
#
#
par(mfrow=c(2,2))  # create a 2x2 frame to hold 4 plots
plot(x1,y)         # view linear relationship between x1 and y
plot(x2,y)         # view linear relationship between x2 and y
scatterplot3d(x1,x2,y) # view linear relationship between y and x1, x2:
                       # the points should be roughly on a plane. Must
                       # load up package scatterplot3d first.
plot(x1,x2)        # make sure x1 and x2 are not linearly related


### [3] Data analysis 

#[3a] fit the full model involving all predictors
fit1=lm(y~x1+x2)      
summary(fit1)
anova(fit1)

#[3b] Extra sum of squares and Partial F-test for H0: beta1=0
fit2=lm(y~x2)  #fit the reduced model without x1 (i.e. with only x2).
summary(fit2)
anova(fit2)

extraSS = (5382.4+168.4)-(4599.1)   # or 1185.4 - 233.7
partialF=(extraSS/1)/(233.7/(25-3)) # equals t^2 for testing beta1 from fit1
pv=1-pf(partialF,1,(25-3))  
pv     # same as the t-test pvalue for beta1 from fit1

#[3c] Test a general linear hypothesis H0: beta1=beta2
# T matrix is (0,1,-1) and r=1; reduced model y=beta0+beta1(x1+x2)+epsilon

x3=x1+x2
fit3=lm(y~x3)
summary(fit3)
anova(fit3)

SSH0 = 1136.6 - 233.7   # or (5382.4+168.4)-(4647.9)
F0=(SSH0/1)/(233.7/(25-3)) 
pv0=1-pf(F0,1,(25-3))  
pv0    # p-value=5*10^(-9); reject H0 that beta1=beta2.    

#[3d] Confidence interval for, say, beta1
# Method 1: use the s.e. for beta1-hat from summary.lm(fit1) directly to construct a CI
summary.lm(fit1)   #shows beta1-hat=1.6159, s.e.=0.1707 and residual standard error df=22.
lower1=1.6159-qt(0.975,22)*0.1707 
upper1=1.6159+qt(0.975,22)*0.1707
cat(&quot;The 95% CI for beta1 is: (&quot;, lower1, &quot;,&quot; ,upper1 , &quot;)&quot;, &quot;\n&quot;)

# Method 2: compute the s.e. of beta1-hat yourself, and then the CI
X=cbind(1,x1,x2)
XX=t(X)%*%X     # t(X) is the transpose of X and %*% is for matrix multiplication
C=solve(XX)     # use solve command to find C, the inverse of XX.

betahat=fit1$coefficients      #betahat contains the LS estimate of beta
sigma=summary.lm(fit1)$sigma   #sigma is the estimated sigma, i.e. root(MSres)

df=length<img class="icon emoticon" alt="Yes" title="Yes" src="https://coursespaces.uvic.ca/theme/image.php/boost/core/1539818495/s/yes" />-length(betahat)
lower12=betahat[2]-qt(0.975,df)*sigma*sqrt(C[2,2])
upper12=betahat[2]+qt(0.975,df)*sigma*sqrt(C[2,2])
cat(&quot;The 95% CI for beta1 is: (&quot;, lower12, &quot;,&quot; ,upper12 , &quot;)&quot;, &quot;\n&quot;)

#[3e] Confidence and Prediction intervals

# Method 1: use command predict; can only work for (x1,x2) in the data set, don&#039;t know why.
xnew1=c(2,150)  # specify new (x1,x2) value where predication intervals are to be computed
xnew2=c(8,600)
xnew=cbind(xnew1,xnew2)

newx=data.frame(x=t(xnew))   
predict(fit1, newx, interval=&quot;confidence&quot;)   # predictions for the E(y|x) at x=5 and x=10
predict(fit1, newx, interval=&quot;prediction&quot;)   # predictions for y|x=5 and y|x=10

# Method 2: direct method (this one works at any x0)
x0=c(1,2,150)
fitted=t(x0)%*%betahat
var1=t(x0)%*%C%*%x0
lower2=fitted-qt(0.975,df)*sigma*sqrt(var1)
upper2=fitted+qt(0.975,df)*sigma*sqrt(var1)
cat(&quot;The 95% CI for mean response at x0=(&quot;,x0,&quot;) is: (&quot;, lower2, &quot;,&quot; ,upper2 , &quot;)&quot;, &quot;\n&quot;)

lower3=fitted-qt(0.975,df)*sigma*sqrt(1+var1)
upper3=fitted+qt(0.975,df)*sigma*sqrt(1+var1)
cat(&quot;The 95% prediction interval at x0=(&quot;,x0,&quot;) is: (&quot;, lower3, &quot;,&quot; ,upper3 , &quot;)&quot;, &quot;\n&quot;)

#[3f] Look for multicollinearity for the full model
# load package car first before running vif command

vif(fit1)  # showing vif of both variables are less than 10.
</div></pre>